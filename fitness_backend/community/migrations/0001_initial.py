# Generated by Django 5.2.6 on 2025-09-18 13:44

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('steps', 'Daily Steps'), ('distance', 'Total Distance'), ('calories', 'Calories Burned'), ('workouts', 'Workout Count'), ('weight_loss', 'Weight Loss'), ('consistency', 'Workout Consistency'), ('time_based', 'Time-Based Exercise'), ('custom', 'Custom Challenge')], max_length=15)),
                ('target_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('target_unit', models.CharField(max_length=20)),
                ('rules', models.TextField(blank=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('registration_deadline', models.DateField(blank=True, null=True)),
                ('entry_fee', models.DecimalField(decimal_places=2, default=0, help_text='Entry fee in currency', max_digits=8)),
                ('is_free', models.BooleanField(default=True)),
                ('prize_description', models.TextField(blank=True)),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('is_team_challenge', models.BooleanField(default=False)),
                ('allow_late_join', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('open_registration', 'Open for Registration'), ('registration_closed', 'Registration Closed'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('image', models.ImageField(blank=True, null=True, upload_to='challenge_images/')),
                ('featured', models.BooleanField(default=False)),
                ('total_participants', models.PositiveIntegerField(default=0)),
                ('total_prize_pool', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'challenges',
                'ordering': ['-featured', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('free', 'Free'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('current_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('target_reached', models.BooleanField(default=False)),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('current_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('final_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('dropped_out', 'Dropped Out'), ('disqualified', 'Disqualified')], default='active', max_length=15)),
                ('notifications_enabled', models.BooleanField(default=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='community.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'challenge_participants',
                'ordering': ['current_rank', '-current_value'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('daily_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('cumulative_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('verified', models.BooleanField(default=False)),
                ('proof_image', models.ImageField(blank=True, null=True, upload_to='challenge_proof/')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_entries', to='community.challengeparticipant')),
            ],
            options={
                'db_table': 'challenge_progress',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('blocked', 'Blocked')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('addressee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_requests_received', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_requests_sent', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'friendships',
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('leaderboard_type', models.CharField(choices=[('global_steps', 'Global Steps'), ('global_calories', 'Global Calories Burned'), ('global_workouts', 'Global Workout Count'), ('friends_steps', 'Friends Steps'), ('friends_calories', 'Friends Calories'), ('challenge_specific', 'Challenge Specific'), ('weekly_active', 'Weekly Most Active'), ('monthly_consistent', 'Monthly Most Consistent')], max_length=20)),
                ('time_period', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('all_time', 'All Time')], max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('max_entries', models.PositiveIntegerField(default=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenge', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='community.challenge')),
            ],
            options={
                'db_table': 'leaderboards',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField()),
                ('score', models.DecimalField(decimal_places=2, max_digits=10)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='community.leaderboard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'leaderboard_entries',
                'ordering': ['rank'],
            },
        ),
        migrations.CreateModel(
            name='SocialPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(max_length=500)),
                ('image', models.ImageField(blank=True, null=True, upload_to='social_posts/')),
                ('post_type', models.CharField(choices=[('workout', 'Workout Achievement'), ('goal', 'Goal Achievement'), ('challenge', 'Challenge Update'), ('general', 'General Post'), ('milestone', 'Milestone Reached')], default='general', max_length=10)),
                ('workout_id', models.UUIDField(blank=True, null=True)),
                ('goal_id', models.UUIDField(blank=True, null=True)),
                ('challenge_id', models.UUIDField(blank=True, null=True)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('is_public', models.BooleanField(default=True)),
                ('friends_only', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'social_posts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='community.socialpost')),
            ],
            options={
                'db_table': 'post_likes',
            },
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=300)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='community.socialpost')),
            ],
            options={
                'db_table': 'post_comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='challenge',
            index=models.Index(fields=['status', 'start_date'], name='challenges_status_f3de54_idx'),
        ),
        migrations.AddIndex(
            model_name='challenge',
            index=models.Index(fields=['challenge_type'], name='challenges_challen_b892f4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='challengeparticipant',
            unique_together={('challenge', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='challengeprogress',
            unique_together={('participant', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='friendship',
            unique_together={('requester', 'addressee')},
        ),
        migrations.AlterUniqueTogether(
            name='leaderboardentry',
            unique_together={('leaderboard', 'user', 'period_start')},
        ),
        migrations.AddIndex(
            model_name='socialpost',
            index=models.Index(fields=['-created_at'], name='social_post_created_d672e0_idx'),
        ),
        migrations.AddIndex(
            model_name='socialpost',
            index=models.Index(fields=['user', '-created_at'], name='social_post_user_id_e159ee_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='postlike',
            unique_together={('post', 'user')},
        ),
    ]
