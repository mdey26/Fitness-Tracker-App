# Generated by Django 5.2.6 on 2025-09-18 13:43

import datetime
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(help_text='Font Awesome icon or emoji', max_length=50)),
                ('achievement_type', models.CharField(choices=[('workout_streak', 'Workout Streak'), ('total_workouts', 'Total Workouts'), ('calories_burned', 'Calories Burned'), ('weight_loss', 'Weight Loss'), ('steps_milestone', 'Steps Milestone'), ('goal_completion', 'Goal Completion'), ('social_engagement', 'Social Engagement'), ('consistency', 'Consistency'), ('personal_record', 'Personal Record'), ('special_event', 'Special Event')], max_length=20)),
                ('required_value', models.PositiveIntegerField(help_text='Required value to unlock achievement')),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('rarity', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('legendary', 'Legendary')], default='bronze', max_length=10)),
                ('points', models.PositiveIntegerField(default=10, help_text='Points awarded for this achievement')),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden until unlocked')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'achievements',
                'ordering': ['rarity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('goal_type', models.CharField(choices=[('weight_loss', 'Weight Loss'), ('weight_gain', 'Weight Gain'), ('muscle_gain', 'Muscle Gain'), ('strength', 'Strength Training'), ('endurance', 'Endurance'), ('steps', 'Daily Steps'), ('calories_burn', 'Calories Burned'), ('workout_frequency', 'Workout Frequency'), ('water_intake', 'Water Intake'), ('sleep', 'Sleep Duration'), ('custom', 'Custom Goal')], max_length=20)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('target_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('current_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('unit', models.CharField(help_text='kg, steps, calories, etc.', max_length=20)),
                ('start_date', models.DateField(default=datetime.date.today)),
                ('target_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('paused', 'Paused'), ('cancelled', 'Cancelled')], default='active', max_length=10)),
                ('is_daily_goal', models.BooleanField(default=False)),
                ('reminder_enabled', models.BooleanField(default=True)),
                ('reminder_time', models.TimeField(blank=True, null=True)),
                ('reward_description', models.CharField(blank=True, max_length=200)),
                ('motivation_quote', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'goals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GoalProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today)),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_entries', to='goals.goal')),
            ],
            options={
                'db_table': 'goal_progress',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('notified', models.BooleanField(default=False)),
                ('earned_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('context_data', models.JSONField(blank=True, help_text='Additional context about achievement', null=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='goals.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_achievements',
                'ordering': ['-earned_at'],
            },
        ),
        migrations.AddIndex(
            model_name='goal',
            index=models.Index(fields=['user', 'status'], name='goals_user_id_49fd29_idx'),
        ),
        migrations.AddIndex(
            model_name='goal',
            index=models.Index(fields=['user', 'goal_type'], name='goals_user_id_d50d5e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='goalprogress',
            unique_together={('goal', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='userachievement',
            unique_together={('user', 'achievement')},
        ),
    ]
