# Generated by Django 5.2.6 on 2025-09-18 13:43

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#28a745', help_text='Hex color code', max_length=7)),
            ],
            options={
                'verbose_name_plural': 'Food Categories',
                'db_table': 'food_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('brand', models.CharField(blank=True, max_length=100)),
                ('calories_per_100g', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('protein_per_100g', models.DecimalField(decimal_places=2, default=0, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('carbs_per_100g', models.DecimalField(decimal_places=2, default=0, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('fats_per_100g', models.DecimalField(decimal_places=2, default=0, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('fiber_per_100g', models.DecimalField(decimal_places=2, default=0, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('sugar_per_100g', models.DecimalField(decimal_places=2, default=0, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('sodium_per_100g', models.DecimalField(decimal_places=2, default=0, help_text='in mg', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('calcium_per_100g', models.DecimalField(decimal_places=2, default=0, help_text='in mg', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('iron_per_100g', models.DecimalField(decimal_places=2, default=0, help_text='in mg', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('vitamin_c_per_100g', models.DecimalField(decimal_places=2, default=0, help_text='in mg', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('default_serving_size', models.DecimalField(decimal_places=2, default=100, help_text='Default serving size in grams', max_digits=6)),
                ('serving_unit', models.CharField(default='g', help_text='Unit for serving (g, ml, piece, etc.)', max_length=20)),
                ('barcode', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Verified by admin')),
                ('image', models.ImageField(blank=True, null=True, upload_to='food_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nutrition.foodcategory')),
            ],
            options={
                'db_table': 'foods',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NutritionGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_calories', models.PositiveIntegerField()),
                ('daily_protein_g', models.PositiveIntegerField(blank=True, null=True)),
                ('daily_carbs_g', models.PositiveIntegerField(blank=True, null=True)),
                ('daily_fats_g', models.PositiveIntegerField(blank=True, null=True)),
                ('daily_fiber_g', models.PositiveIntegerField(blank=True, null=True)),
                ('daily_water_ml', models.PositiveIntegerField(default=2000)),
                ('breakfast_percentage', models.PositiveIntegerField(default=25, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('lunch_percentage', models.PositiveIntegerField(default=35, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('dinner_percentage', models.PositiveIntegerField(default=30, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('snacks_percentage', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('protein_percentage', models.PositiveIntegerField(default=25, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)])),
                ('carbs_percentage', models.PositiveIntegerField(default=50, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(70)])),
                ('fats_percentage', models.PositiveIntegerField(default=25, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(40)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nutrition_goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'nutrition_goals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('servings', models.PositiveIntegerField(default=1)),
                ('prep_time_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('cook_time_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('instructions', models.TextField(blank=True)),
                ('total_calories', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('total_protein', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('total_carbs', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('total_fats', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('is_public', models.BooleanField(default=False)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('times_made', models.PositiveIntegerField(default=0)),
                ('image', models.ImageField(blank=True, null=True, upload_to='recipe_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recipes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MealEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('meal_type', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snacks', 'Snacks')], max_length=10)),
                ('date', models.DateField()),
                ('time', models.TimeField(blank=True, null=True)),
                ('quantity_g', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('calories', models.DecimalField(decimal_places=2, max_digits=8)),
                ('protein', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('carbs', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('fats', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('food', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nutrition.food')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_entries', to=settings.AUTH_USER_MODEL)),
                ('recipe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nutrition.recipe')),
            ],
            options={
                'db_table': 'meal_entries',
                'ordering': ['-date', '-time', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_g', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.CharField(blank=True, help_text="e.g., 'chopped', 'diced'", max_length=100)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutrition.food')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='nutrition.recipe')),
            ],
            options={
                'db_table': 'recipe_ingredients',
            },
        ),
        migrations.CreateModel(
            name='WaterIntake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount_ml', models.PositiveIntegerField(default=0, help_text='Water consumed in milliliters')),
                ('daily_goal_ml', models.PositiveIntegerField(default=2000, help_text='Daily water goal in ml')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='water_intake', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'water_intake',
            },
        ),
        migrations.AddIndex(
            model_name='food',
            index=models.Index(fields=['name'], name='foods_name_01bd69_idx'),
        ),
        migrations.AddIndex(
            model_name='food',
            index=models.Index(fields=['barcode'], name='foods_barcode_1c521a_idx'),
        ),
        migrations.AddIndex(
            model_name='mealentry',
            index=models.Index(fields=['user', 'date'], name='meal_entrie_user_id_819f0a_idx'),
        ),
        migrations.AddIndex(
            model_name='mealentry',
            index=models.Index(fields=['user', 'meal_type'], name='meal_entrie_user_id_b0db38_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='recipeingredient',
            unique_together={('recipe', 'food')},
        ),
        migrations.AddIndex(
            model_name='waterintake',
            index=models.Index(fields=['user', 'date'], name='water_intak_user_id_3475ab_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='waterintake',
            unique_together={('user', 'date')},
        ),
    ]
